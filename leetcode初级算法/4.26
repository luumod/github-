每天两道题，又复习了一下前两天做的题，感觉还可以

加一: https://leetcode-cn.com/leetbook/read/top-interview-questions-easy/x2cv1c/
digits = [1,2,3]      输入：digits = [4,3,2,1]
输出：[1,2,4]          输出：[4,3,2,2]
把数组里的元素看成一整个数字，然后再加一；不能把数组里的数字转换为字符型，然后操作，因为这样我发现做不出来

思路:直接把数组的数字看成一个整数，遍历整型数组，从最后一个元素开始；
如果最后一个元素是9，if，则把此元素赋值为0
如果最后一个元素不是9，else，直接此元素加1，并且可以直接return 不需要另一个数组来重新存储
!!如果几个元素全部都是9，则第一个元素再加1肯定就多了1位， 如: 99->100 999->1000
因此需要用一个新的数组重新存储，动态分配内存，注意此时大小是原数组的大小加1
直接把第一个元素dest[0]赋值为1，然后遍历剩下的元素，直接赋值为0，长度为原数组加1，return即可

/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
int* plusOne(int* digits, int digitsSize, int* returnSize){
    int a;
    for (int i=digitsSize-1;i>=0;i--){
        if (digits[i]==9)
        //判断最后一个数字是否是9，加一，此位为0
            digits[i]=0;
        else{
        //数字不是9，则直接相加，改变原数组的数字
            digits[i]=digits[i]+1;
            *returnSize=digitsSize;
            //直接返回即可
            return digits;
        }
    }
    //如果原始第一位也为9,需要一个新的数组存储
    int* dest=(int*) malloc((digitsSize+1)*sizeof(int));  //长度为原数组加1
    dest[0]=1;  //第一位是1  100   1000  1000
    for (int i=1;i<=digitsSize;i++){
        //原始三位数，拷贝三位数，四位数就是四位数
        dest[i]=0;
    }
    //长度
    *returnSize=digitsSize+1;
    return dest;
}

第二题:  移动零
这个题很重要！！！***************************重要！！！重要！！！常见！！！常见！！！
输入: nums = [0,1,0,3,12]
输出: [1,3,12,0,0]    把零移动到数组元素的最后位置，初始位置不变

思路: 利用 双指针！！！ 
零指针: 一个指针控制零移动，非零指针:指针控制非零数字
初始将两个指针设置为索引0，  非零指针遍历数组的元素，如果元素不是零，将两个指针元素互换位置，零指针加1，非零指针加1
零指针只控制零的位置，非零指针只控制非零，零与非零依次交换位置，则最后的元素全是零

简单图解:例如原数组: 0 1 2 5 0 3 :
第一次交换:  1 0 2 5 0 3 
第二次交换:  1 2 0 5 0 3
第三次交换:  1 2 5 0 0 3
第四次交换:  1 2 5 3 0 0

void change(int* a,int* b){
    int temp;
    temp=*a;
    *a=*b;
    *b=temp;  
    //交换两个元素的值
}
void moveZeroes(int* nums, int numsSize){   
    int fast=0,slow=0;
    //一个指针控制非零，一个指针控制零，交换位置
    int temp;
    for (int fast=0;fast<numsSize;fast++){  //非零指针递增
        if (nums[fast]){
            //元素不等于0，互换位置
            change(&nums[slow],&nums[fast]);
            slow++;
        }
    }
}
